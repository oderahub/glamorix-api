openapi: 3.0.3
info:
  title: Omorix API
  description: API for the Omorix e-commerce platform
  version: 1.0.0
  contact:
    email: support@omorix.com
servers:
  - url: https://omorix-backend.onrender.com/api-docs
    description: Local development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, customer]
        status:
          type: string
          enum: [pending, verified, suspended, banned, deleted]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        address:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        parentId:
          type: string
          format: uuid
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        isActive:
          type: boolean
        displayOrder:
          type: integer
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductVariant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        size:
          type: string
          nullable: true
        color:
          type: string
          nullable: true
        material:
          type: string
          nullable: true
        price:
          type: number
          format: float
        stockQuantity:
          type: integer
        sku:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductImage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        imageData:
          type: string
          format: base64
        mimeType:
          type: string
        displayOrder:
          type: integer
        isDefault:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ProductImageUpdate:
      type: object
      properties:
        displayOrder:
          type: integer
          minimum: 0
        isDefault:
          type: boolean
      required:
        - displayOrder
        - isDefault
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
          nullable: true
        price:
          type: number
          format: float
        discountPercentage:
          type: integer
          nullable: true
        stockQuantity:
          type: integer
          description: Always 0, stock managed by ProductVariant
        sku:
          type: string
        isActive:
          type: boolean
        featuredImage:
          type: string
          format: base64
          nullable: true
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ProductVariant'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
          nullable: true
    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        variantId:
          type: string
          format: uuid
        quantity:
          type: integer
        unitPrice:
          type: number
          format: float
        subtotal:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        orderNumber:
          type: string
        status:
          type: string
          enum: [pending, shipped, delivered, canceled]
        totalAmount:
          type: number
          format: float
        subtotal:
          type: number
          format: float
        tax:
          type: number
          format: float
        shippingCost:
          type: number
          format: float
        shippingFirstName:
          type: string
          nullable: true
        shippingLastName:
          type: string
          nullable: true
        shippingAddress:
          type: string
        shippingCity:
          type: string
          nullable: true
        shippingState:
          type: string
          nullable: true
        shippingZip:
          type: string
          nullable: true
        shippingCountry:
          type: string
          nullable: true
        shippingPhone:
          type: string
          nullable: true
        shippingMethod:
          type: string
          enum: [standard, express, free_shipping]
        paymentMethod:
          type: string
          enum: [paystack, credit_card, cash_on_delivery, paypal]
        email:
          type: string
          format: email
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Cart:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, converted]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cartId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        variantId:
          type: string
          format: uuid
        quantity:
          type: integer
        unitPrice:
          type: number
          format: float
        addedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        product:
          $ref: '#/components/schemas/Product'
    CartItemSchema:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          description: The ID of the product to add to the cart
        variantId:
          type: string
          format: uuid
          description: The ID of the product variant
        quantity:
          type: integer
          minimum: 1
          description: The quantity of the item
      required:
        - productId
        - variantId
        - quantity
    CartUpdateSchema:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemSchema'
      required:
        - items
    CheckoutSchema:
      type: object
      properties:
        shippingFirstName:
          type: string
          nullable: true
        shippingLastName:
          type: string
          nullable: true
        shippingAddress:
          type: string
          description: The shipping address
        shippingCity:
          type: string
          nullable: true
        shippingState:
          type: string
          nullable: true
        shippingZip:
          type: string
          nullable: true
        shippingCountry:
          type: string
          nullable: true
        shippingPhone:
          type: string
          nullable: true
        shippingMethod:
          type: string
          enum: [standard, express, free_shipping]
        paymentMethod:
          type: string
          enum: [paystack, credit_card, cash_on_delivery, paypal]
        email:
          type: string
          format: email
      required:
        - shippingAddress
        - shippingMethod
        - paymentMethod
        - email
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
        statusCode:
          type: integer
    Error:
      type: object
      properties:
        success:
          type: boolean
        statusCode:
          type: integer
        message:
          type: string
        data:
          type: object
          properties:
            errors:
              type: array
              items:
                type: object
                properties:
                  message:
                    type: string
                  path:
                    type: array
                    items:
                      type: string
        timestamp:
          type: string
          format: date-time
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                role:
                  type: string
                  enum: [admin, customer]
              required:
                - email
                - password
                - firstName
                - lastName
                - phone
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/verify-otp:
    post:
      summary: Verify user OTP
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                otp:
                  type: string
              required:
                - userId
                - otp
      responses:
        '200':
          description: OTP verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/forgot-password:
    post:
      summary: Request password reset
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: Password reset OTP sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/reset-password:
    post:
      summary: Reset user password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                otp:
                  type: string
                password:
                  type: string
              required:
                - userId
                - otp
                - password
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid OTP or user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/change-password:
    post:
      summary: Change user password
      tags:
        - Authentication
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
              required:
                - oldPassword
                - newPassword
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid old password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/categories:
    post:
      summary: Create a main category
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/categories/{categoryId}/sub:
    post:
      summary: Create a subcategory
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Subcategory created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/categories/{subCategoryId}/sub:
    post:
      summary: Create a sub-subcategory
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: subCategoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Sub-subcategory created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories:
    get:
      summary: Get all categories
      tags:
        - Public
        - Categories
      responses:
        '200':
          description: Categories retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /categories/{id}:
    get:
      summary: Get category details
      tags:
        - Public
        - Categories
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/categories/{id}:
    patch:
      summary: Update a category
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a category
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products:
    post:
      summary: Create a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                discountPercentage:
                  type: integer
                stockQuantity:
                  type: integer
                  description: Always 0, stock managed by ProductVariant
                sku:
                  type: string
                slug:
                  type: string
                  description: unique slug for SEO
                isActive:
                  type: string
                  enum:
                    - active
                    - inactive
                    - archived
                    - restored
                    - draft
                  default: active
                categoryIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      size:
                        type: string
                        nullable: true
                      color:
                        type: string
                        nullable: true
                      material:
                        type: string
                        nullable: true
                      price:
                        type: number
                        format: float
                      stockQuantity:
                        type: integer
                      sku:
                        type: string
                    required:
                      - stockQuantity
              required:
                - name
                - price
                - sku
                - categoryIds
                - variants
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/{id}:
    patch:
      summary: Update a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                slug:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                discountPercentage:
                  type: integer
                stockQuantity:
                  type: integer
                sku:
                  type: string
                isActive:
                  type: string
                  enum:
                    - active
                    - inactive
                    - archived
                    - restored
                    - draft
                  default: active
                categoryIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                images:
                  type: array
                  items:
                    type: string
                    format: binary
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      size:
                        type: string
                        nullable: true
                      color:
                        type: string
                        nullable: true
                      material:
                        type: string
                        nullable: true
                      price:
                        type: number
                        format: float
                      stockQuantity:
                        type: integer
                      sku:
                        type: string
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/{id}/stock:
    patch:
      summary: Update product variant stock
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: variantId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stockQuantity:
                  type: integer
              required:
                - stockQuantity
      responses:
        '200':
          description: Stock updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product or variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/{id}/archive:
    patch:
      summary: Archive a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product archived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/{id}/restore:
    patch:
      summary: Restore a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product restored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/{productId}/images:
    post:
      summary: Add images to a product
      tags:
        - Admin
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - images
      responses:
        '201':
          description: Images added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/images/{imageId}:
    delete:
      summary: Delete a product image
      tags:
        - Admin
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Image deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update product image order and default status
      tags:
        - Admin
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductImageUpdate'
      responses:
        '200':
          description: Image updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products:
    get:
      summary: Get all products
      tags:
        - Public
        - Products
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: categoryId
          in: query
          schema:
            type: string
            format: uuid
        - name: isActive
          in: query
          schema:
            type: boolean
            default: true
        - name: minPrice
          in: query
          schema:
            type: number
            format: float
        - name: maxPrice
          in: query
          schema:
            type: number
            format: float
        - name: sort
          in: query
          schema:
            type: string
            enum: [createdAt_desc, price_asc, price_desc]
            default: createdAt_desc
      responses:
        '200':
          description: Products retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Products not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    get:
      summary: Get product details
      tags:
        - Public
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/category/{id}:
    get:
      summary: Get products by category
      tags:
        - Public
        - Products
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: isActive
          in: query
          schema:
            type: boolean
            default: true
        - name: sort
          in: query
          schema:
            type: string
            enum: [createdAt_desc, price_asc, price_desc]
            default: createdAt_desc
      responses:
        '200':
          description: Products by category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Products or category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/images/{imageId}:
    get:
      summary: Get product image
      tags:
        - Public
        - Products
      parameters:
        - name: imageId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Image retrieved successfully
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '404':
          description: Image not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/cart:
    get:
      summary: Get cart details
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Add item to cart
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemSchema'
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update cart
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartUpdateSchema'
      responses:
        '200':
          description: Cart updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove item from cart
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemSchema'
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/cart/checkout:
    post:
      summary: Checkout cart
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutSchema'
      responses:
        '201':
          description: Checkout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/dashboard:
    get:
      summary: Get admin dashboard statistics
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard statistics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/orders:
    get:
      summary: Get all orders
      tags:
        - Admin
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, shipped, delivered, canceled]
        - name: sortBy
          in: query
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
      responses:
        '200':
          description: Orders retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/orders/{id}:
    patch:
      summary: Update order status
      tags:
        - Admin
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, shipped, delivered, canceled]
              required:
                - status
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Cancel an order
      tags:
        - Admin
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Order canceled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/customers:
    get:
      summary: Get all customers
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: sortBy
          in: query
          schema:
            type: string
            default: createdAt
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [ASC, DESC]
            default: DESC
      responses:
        '200':
          description: Customers retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/customers/{id}:
    get:
      summary: Get customer details
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a customer
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Customer deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/customers/{id}/ban:
    patch:
      summary: Ban a customer
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [banned, active]
              required:
                - status
      responses:
        '200':
          description: Customer banned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
