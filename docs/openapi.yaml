openapi: 3.0.3
info:
  title: Glamorix API
  description: API for the Glamorix e-commerce platform
  version: 1.0.0
  contact:
    email: support@glamorix.com
servers:
  - url: http://localhost:3000/api
    description: Local development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum: [admin, customer, seller]
        status:
          type: string
          enum: [pending, verified, suspended, banned, deleted]
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        address:
          type: string
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        parentId:
          type: string
          format: uuid
        image:
          type: string
          format: uri
        isActive:
          type: boolean
        displayOrder:
          type: integer
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        discountPercentage:
          type: integer
        stockQuantity:
          type: integer
        sku:
          type: string
        isActive:
          type: boolean
        featuredImage:
          type: string
          format: uri
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        orderNumber:
          type: string
        status:
          type: string
          enum: [pending, shipped, delivered, canceled]
        totalAmount:
          type: number
          format: float
    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        orderId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        quantity:
          type: integer
        unitPrice:
          type: number
          format: float
    Cart:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, converted]
    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cartId:
          type: string
          format: uuid
        productId:
          type: string
          format: uuid
        variantId:
          type: string
          format: uuid
        quantity:
          type: integer
        unitPrice:
          type: number
          format: float
    customerBanSchema:
      type: object
      properties:
        status:
          type: string
          enum: [pending, verified, suspended, banned]
      required:
        - status
    cartItemSchema:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          description: The ID of the product to add to the cart
        variantId:
          type: string
          format: uuid
          description: The ID of the product variant (optional)
          nullable: true
        quantity:
          type: integer
          minimum: 1
          description: The quantity of the item
      required:
        - productId
        - quantity
    cartUpdateSchema:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/cartItemSchema'
      required:
        - items
    checkoutSchema:
      type: object
      properties:
        shippingFirstName:
          type: string
          nullable: true
        shippingLastName:
          type: string
          nullable: true
        shippingAddress:
          type: string
          description: The shipping address
        shippingCity:
          type: string
          nullable: true
        shippingState:
          type: string
          nullable: true
        shippingZip:
          type: string
          nullable: true
        shippingCountry:
          type: string
          nullable: true
        shippingPhone:
          type: string
          nullable: true
        shippingMethod:
          type: string
          enum: [standard, express, free_shipping]
        paymentMethod:
          type: string
          enum: [paystack, card, cash_on_delivery]
      required:
        - shippingAddress
        - shippingMethod
        - paymentMethod
    Error:
      type: object
      properties:
        success:
          type: boolean
        statusCode:
          type: integer
        message:
          type: string
        data:
          type: object
          properties:
            errors:
              type: array
              items:
                type: object
                properties:
                  message:
                    type: string
                  path:
                    type: array
                    items:
                      type: string
        timestamp:
          type: string
          format: date-time
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                  enum: [admin, customer, seller]
              required:
                - email
                - password
                - firstName
                - lastName
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/verify-otp:
    post:
      summary: Verify user OTP
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
                otp:
                  type: string
              required:
                - userId
                - otp
      responses:
        '200':
          description: OTP verified
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '400':
          description: Invalid OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/categories:
    post:
      summary: Create a main category
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/categories/{categoryId}/sub:
    post:
      summary: Create a subcategory
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: Subcategory created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /categories:
    get:
      summary: Get all categories
      tags:
        - Public
      responses:
        '200':
          description: Categories retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /categories/{id}:
    get:
      summary: Get category details
      tags:
        - Public
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/categories/{id}:
    patch:
      summary: Update a category
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a category
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category deleted
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products:
    post:
      summary: Create a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                slug:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                discountPercentage:
                  type: integer
                stockQuantity:
                  type: integer
                sku:
                  type: string
                isActive:
                  type: boolean
                categoryIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                featuredImage:
                  type: string
                  format: binary
              required:
                - name
                - price
                - stockQuantity
                - sku
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/{id}:
    patch:
      summary: Update a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/{id}/stock:
    patch:
      summary: Update product stock
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stockQuantity:
                  type: integer
              required:
                - stockQuantity
      responses:
        '200':
          description: Stock updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/{id}/archive:
    patch:
      summary: Archive a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product archived
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/products/{id}/restore:
    patch:
      summary: Restore a product
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product restored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products:
    get:
      summary: Get all products
      tags:
        - Public
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: categoryId
          in: query
          schema:
            type: string
            format: uuid
        - name: isActive
          in: query
          schema:
            type: boolean
            default: true
        - name: minPrice
          in: query
          schema:
            type: number
            format: float
        - name: maxPrice
          in: query
          schema:
            type: number
            format: float
        - name: sort
          in: query
          schema:
            type: string
            enum: [createdAt_desc, price_asc, price_desc]
            default: createdAt_desc
      responses:
        '200':
          description: Products retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                      offset:
                        type: integer
                      total:
                        type: integer
  /products/{id}:
    get:
      summary: Get product details
      tags:
        - Public
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/category/{id}:
    get:
      summary: Get products by category
      tags:
        - Public
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
        - name: isActive
          in: query
          schema:
            type: boolean
            default: true
        - name: sort
          in: query
          schema:
            type: string
            enum: [createdAt_desc, price_asc, price_desc]
            default: createdAt_desc
      responses:
        '200':
          description: Products by category
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    type: object
                    properties:
                      limit:
                        type: integer
                      offset:
                        type: integer
                      total:
                        type: integer
  /orders:
    post:
      summary: Place an order
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order placed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{orderId}:
    get:
      summary: Get order details
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/status/{orderId}:
    get:
      summary: Get order status
      tags:
        - Orders
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [pending, shipped, delivered, canceled]
                  trackingNumber:
                    type: string
                  trackingUrl:
                    type: string
                  shippedAt:
                    type: string
                    format: date-time
                  deliveredAt:
                    type: string
                    format: date-time
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/cancel/{orderId}:
    post:
      summary: Cancel an order
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cancelReason:
                  type: string
      responses:
        '200':
          description: Order canceled
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/orders/{id}:
    patch:
      summary: Update order status
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, shipped, delivered, canceled]
              required:
                - status
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Cancel an order (admin)
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Order canceled
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/customers:
    get:
      summary: Get all customers
      tags:
        - Admin
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Customers retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /admin/customers/{id}:
    get:
      summary: Get customer details
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /admin/customers/{id}/ban:
    patch:
      summary: Ban a customer
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/customerBanSchema'
      responses:
        '200':
          description: Customer banned
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # /admin/customers/{id}:
  #   delete:
  #     summary: Delete a customer
  #     tags:
  #       - Admin
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #     responses:
  #       '204':
  #         description: Customer deleted
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties: {}
  #       '403':
  #         description: Forbidden
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  /orders/cart:
    get:
      summary: Get cart details
      tags:
        - Orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    $ref: '#/components/schemas/Cart'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
                  total:
                    type: number
                    format: float
    post:
      summary: Add item to cart
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cartItemSchema'
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    $ref: '#/components/schemas/Cart'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
                  total:
                    type: number
                    format: float
    patch:
      summary: Update cart
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cartUpdateSchema'
      responses:
        '200':
          description: Cart updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    $ref: '#/components/schemas/Cart'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
                  total:
                    type: number
                    format: float
    delete:
      summary: Remove item from cart
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/cartItemSchema'
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  cart:
                    $ref: '#/components/schemas/Cart'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
                  total:
                    type: number
                    format: float
  /orders/cart/checkout:
    post:
      summary: Checkout cart
      tags:
        - Orders
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/checkoutSchema'
      responses:
        '201':
          description: Checkout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Admin
    description: Admin-only management endpoints
  - name: Public
    description: Publicly accessible endpoints
  - name: Orders
    description: Order and cart management endpoints
